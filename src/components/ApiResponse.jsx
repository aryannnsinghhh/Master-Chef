import React, { useState } from "react";
import Markdown from "react-markdown";

// Save Recipe Button Component
function SaveRecipeButton({ textresponse }) {
  const [isSaving, setIsSaving] = useState(false);
  const [saved, setSaved] = useState(false);

  const handleSaveRecipe = async () => {
    setIsSaving(true);
    try {
      // Clean the markdown text for better file content
      const cleanText = textresponse
        .replace(/\*\*/g, '') // Remove bold markdown
        .replace(/\*/g, '') // Remove italic markdown
        .replace(/#{1,6}\s/g, '') // Remove heading markdown
        .trim();

      // Create a blob with the recipe content
      const blob = new Blob([`AI Chef Recipe\n\n${cleanText}\n\nGenerated by AI Chef - ${new Date().toLocaleDateString()}`], {
        type: 'text/plain'
      });

      // Create download link
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `ai-chef-recipe-${Date.now()}.txt`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      // Show success state
      setSaved(true);
      setTimeout(() => setSaved(false), 2000);
    } catch (error) {
      console.error('Error saving recipe:', error);
      alert('Failed to save recipe. Please try again.');
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <button 
      onClick={handleSaveRecipe}
      disabled={isSaving || saved}
      className={`px-6 py-3 font-semibold rounded-xl transition-all duration-300 flex items-center gap-2 shadow-md hover:shadow-lg transform hover:scale-105 active:scale-95 ${
        saved 
          ? 'bg-green-500 text-white' 
          : isSaving 
            ? 'bg-gray-400 text-white cursor-not-allowed' 
            : 'bg-emerald-500 hover:bg-emerald-600 text-white'
      }`}
    >
      {saved ? (
        <>
          <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
          </svg>
          Saved!
        </>
      ) : isSaving ? (
        <>
          <svg className="w-5 h-5 animate-spin" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Saving...
        </>
      ) : (
        <>
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
          </svg>
          Save Recipe
        </>
      )}
    </button>
  );
}

// Share Recipe Button Component
function ShareRecipeButton({ textresponse }) {
  const [isSharing, setIsSharing] = useState(false);
  const [shared, setShared] = useState(false);

  const handleShareRecipe = async () => {
    setIsSharing(true);
    try {
      // Clean the markdown text
      const cleanText = textresponse
        .replace(/\*\*/g, '') // Remove bold markdown
        .replace(/\*/g, '') // Remove italic markdown
        .replace(/#{1,6}\s/g, '') // Remove heading markdown
        .trim();

      const shareText = `Check out this amazing recipe I got from AI Chef!\n\n${cleanText}`;

      // Try to use Web Share API first (mobile friendly)
      if (navigator.share) {
        await navigator.share({
          title: 'AI Chef Recipe',
          text: shareText,
          url: window.location.href
        });
      } else {
        // Fallback to clipboard
        await navigator.clipboard.writeText(shareText);
        
        // Show success feedback
        setShared(true);
        setTimeout(() => setShared(false), 2000);
      }
    } catch (error) {
      console.error('Error sharing recipe:', error);
      // Fallback: try clipboard again
      try {
        const cleanText = textresponse.replace(/\*\*/g, '').replace(/\*/g, '').replace(/#{1,6}\s/g, '').trim();
        await navigator.clipboard.writeText(`Check out this AI Chef recipe!\n\n${cleanText}`);
        setShared(true);
        setTimeout(() => setShared(false), 2000);
      } catch (clipboardError) {
        alert('Unable to share recipe. Please copy the text manually.');
      }
    } finally {
      setIsSharing(false);
    }
  };

  return (
    <button 
      onClick={handleShareRecipe}
      disabled={isSharing || shared}
      className={`px-6 py-3 font-semibold rounded-xl transition-all duration-300 flex items-center gap-2 shadow-md hover:shadow-lg transform hover:scale-105 active:scale-95 ${
        shared 
          ? 'bg-green-500 text-white' 
          : isSharing 
            ? 'bg-gray-400 text-white cursor-not-allowed' 
            : 'bg-teal-500 hover:bg-teal-600 text-white'
      }`}
    >
      {shared ? (
        <>
          <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
          </svg>
          Copied!
        </>
      ) : isSharing ? (
        <>
          <svg className="w-5 h-5 animate-spin" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Sharing...
        </>
      ) : (
        <>
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
          </svg>
          Share Recipe
        </>
      )}
    </button>
  );
}

function ApiResponse({ textresponse }) {
  return (
    <div className="relative overflow-hidden">
      {/* Header Section */}
      <div className="bg-gradient-to-r from-emerald-500 via-teal-500 to-cyan-500 p-8">
        {/* Decorative Elements */}
        <div className="absolute inset-0 opacity-10">
          <div className="absolute top-4 left-8 w-4 h-4 bg-white rounded-full animate-pulse"></div>
          <div className="absolute top-12 right-12 w-6 h-6 bg-yellow-300 rounded-full animate-bounce delay-300"></div>
          <div className="absolute bottom-8 left-16 w-3 h-3 bg-white rounded-full animate-pulse delay-500"></div>
        </div>
        
        <div className="relative z-10 text-center">
          <div className="inline-flex items-center gap-4 mb-3">
            {/* Chef's Kiss Icon */}
            <div className="w-12 h-12 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm">
              <svg className="w-7 h-7 text-white" fill="currentColor" viewBox="0 0 20 20">
                <path d="M10 12a2 2 0 100-4 2 2 0 000 4z"/>
                <path fillRule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd"/>
              </svg>
            </div>
            <h2 className="text-4xl md:text-5xl font-bold text-white">
              Your Recipe
            </h2>
          </div>
          <p className="text-white/90 text-lg font-medium">
            Crafted just for you by AI Chef ✨
          </p>
        </div>
      </div>

      {/* Content Section */}
      <div className="p-8 md:p-12 bg-white">
        <div className="max-w-4xl mx-auto">
          {/* Recipe Content */}
          <div className="prose prose-lg max-w-none
                         prose-headings:text-gray-800 prose-headings:font-bold
                         prose-h1:text-3xl prose-h1:mb-6 prose-h1:text-center prose-h1:border-b prose-h1:border-gray-200 prose-h1:pb-4
                         prose-h2:text-2xl prose-h2:mt-8 prose-h2:mb-4 prose-h2:text-emerald-700
                         prose-h3:text-xl prose-h3:mt-6 prose-h3:mb-3 prose-h3:text-teal-600
                         prose-p:text-gray-700 prose-p:leading-relaxed prose-p:mb-4
                         prose-ul:space-y-2 prose-li:text-gray-700
                         prose-ol:space-y-2 prose-ol:text-gray-700
                         prose-strong:text-gray-800 prose-strong:font-semibold
                         prose-em:text-gray-600 prose-em:italic">
            <Markdown
              components={{
                h1: ({children}) => (
                  <h1 className="text-3xl font-bold text-center text-gray-800 mb-6 pb-4 border-b border-gray-200 flex items-center justify-center gap-3">
                    <span className="text-2xl">�️</span>
                    {children}
                  </h1>
                ),
                h2: ({children}) => (
                  <h2 className="text-2xl font-bold text-emerald-700 mt-8 mb-4 flex items-center gap-3">
                    <span className="w-2 h-8 bg-emerald-500 rounded-full"></span>
                    {children}
                  </h2>
                ),
                h3: ({children}) => (
                  <h3 className="text-xl font-semibold text-teal-600 mt-6 mb-3 flex items-center gap-2">
                    <span className="w-1.5 h-6 bg-teal-400 rounded-full"></span>
                    {children}
                  </h3>
                ),
                ul: ({children}) => (
                  <ul className="space-y-3 my-6">
                    {children}
                  </ul>
                ),
                ol: ({children}) => (
                  <ol className="space-y-3 my-6 counter-reset-[step]">
                    {children}
                  </ol>
                ),
                li: ({children}) => (
                  <li className="flex items-start gap-3 text-gray-700 leading-relaxed">
                    <span className="w-2 h-2 bg-emerald-400 rounded-full mt-2 flex-shrink-0"></span>
                    <span>{children}</span>
                  </li>
                ),
                p: ({children}) => (
                  <p className="text-gray-700 leading-relaxed mb-4 text-lg">
                    {children}
                  </p>
                ),
                strong: ({children}) => (
                  <strong className="font-semibold text-gray-800 bg-yellow-100 px-1 py-0.5 rounded">
                    {children}
                  </strong>
                )
              }}
            >
              {textresponse}
            </Markdown>
          </div>

          {/* Action Buttons */}
          <div className="mt-12 pt-8 border-t border-gray-200">
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <SaveRecipeButton textresponse={textresponse} />
              <ShareRecipeButton textresponse={textresponse} />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default ApiResponse;
